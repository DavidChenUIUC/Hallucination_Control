Train dataset size: 14732
Test dataset size: 819
Max source length: 255
Max target length: 50
Keys of tokenized dataset: ['input_ids', 'attention_mask', 'labels']
Saving the dataset (1/1 shards): 100%|█| 14732/14732 [00:00<00:00, 62924.64 exam
Saving the dataset (1/1 shards): 100%|█| 819/819 [00:00<00:00, 13089.17 examples









Loading checkpoint shards: 100%|████████████████| 12/12 [00:22<00:00,  1.85s/it]
/home/cwtang/.local/lib/python3.10/site-packages/peft/utils/other.py:143: FutureWarning: prepare_model_for_int8_training is deprecated and will be removed in a future version. Use prepare_model_for_kbit_training instead.
  warnings.warn(
  0%|                                                  | 0/2305 [00:00<?, ?it/s]You're using a T5TokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
/home/cwtang/.local/lib/python3.10/site-packages/bitsandbytes/autograd/_functions.py:322: UserWarning: MatMul8bitLt: inputs will be cast from torch.float32 to float16 during quantization
  warnings.warn(f"MatMul8bitLt: inputs will be cast from {A.dtype} to float16 during quantization")
trainable params: 18,874,368 || all params: 11,154,206,720 || trainable%: 0.16921300163961817
{'output_dir': 'lora-flan-t5-xxl-1e-3_linear_warm0.1_seed1234', 'overwrite_output_dir': False, 'do_train': False, 'do_eval': False, 'do_predict': False, 'evaluation_strategy': 'no', 'prediction_loss_only': False, 'per_device_train_batch_size': 32, 'per_device_eval_batch_size': 8, 'per_gpu_train_batch_size': None, 'per_gpu_eval_batch_size': None, 'gradient_accumulation_steps': 1, 'eval_accumulation_steps': None, 'eval_delay': 0, 'learning_rate': 0.001, 'weight_decay': 0.0, 'adam_beta1': 0.9, 'adam_beta2': 0.999, 'adam_epsilon': 1e-08, 'max_grad_norm': 1.0, 'num_train_epochs': 5, 'max_steps': -1, 'lr_scheduler_type': 'linear', 'lr_scheduler_kwargs': {}, 'warmup_ratio': 0.1, 'warmup_steps': 0, 'log_level': 'passive', 'log_level_replica': 'warning', 'log_on_each_node': True, 'logging_dir': 'lora-flan-t5-xxl-1e-3_linear_warm0.1_seed1234/logs', 'logging_strategy': 'steps', 'logging_first_step': False, 'logging_steps': 1, 'logging_nan_inf_filter': True, 'save_strategy': 'steps', 'save_steps': 500, 'save_total_limit': None, 'save_safetensors': True, 'save_on_each_node': False, 'save_only_model': False, 'no_cuda': False, 'use_cpu': False, 'use_mps_device': False, 'seed': 42, 'data_seed': None, 'jit_mode_eval': False, 'use_ipex': False, 'bf16': False, 'fp16': False, 'fp16_opt_level': 'O1', 'half_precision_backend': 'auto', 'bf16_full_eval': False, 'fp16_full_eval': False, 'tf32': None, 'local_rank': 0, 'ddp_backend': None, 'tpu_num_cores': None, 'tpu_metrics_debug': False, 'debug': [], 'dataloader_drop_last': False, 'eval_steps': None, 'dataloader_num_workers': 0, 'past_index': -1, 'run_name': 'lora-flan-t5-xxl-1e-3_linear_warm0.1_seed1234', 'disable_tqdm': False, 'remove_unused_columns': True, 'label_names': None, 'load_best_model_at_end': False, 'metric_for_best_model': None, 'greater_is_better': None, 'ignore_data_skip': False, 'fsdp': [], 'fsdp_min_num_params': 0, 'fsdp_config': {'min_num_params': 0, 'xla': False, 'xla_fsdp_grad_ckpt': False}, 'fsdp_transformer_layer_cls_to_wrap': None, 'deepspeed': None, 'label_smoothing_factor': 0.0, 'optim': 'adamw_torch', 'optim_args': None, 'adafactor': False, 'group_by_length': False, 'length_column_name': 'length', 'report_to': ['wandb'], 'ddp_find_unused_parameters': None, 'ddp_bucket_cap_mb': None, 'ddp_broadcast_buffers': None, 'dataloader_pin_memory': True, 'dataloader_persistent_workers': False, 'skip_memory_metrics': True, 'use_legacy_prediction_loop': False, 'push_to_hub': False, 'resume_from_checkpoint': None, 'hub_model_id': None, 'hub_strategy': 'every_save', 'hub_token': '<HUB_TOKEN>', 'hub_private_repo': False, 'hub_always_push': False, 'gradient_checkpointing': False, 'gradient_checkpointing_kwargs': None, 'include_inputs_for_metrics': False, 'fp16_backend': 'auto', 'push_to_hub_model_id': None, 'push_to_hub_organization': None, 'push_to_hub_token': '<PUSH_TO_HUB_TOKEN>', 'mp_parameters': '', 'auto_find_batch_size': True, 'full_determinism': False, 'torchdynamo': None, 'ray_scope': 'last', 'ddp_timeout': 1800, 'torch_compile': False, 'torch_compile_backend': None, 'torch_compile_mode': None, 'dispatch_batches': None, 'split_batches': False, 'include_tokens_per_second': False, 'include_num_input_tokens_seen': False, 'neftune_noise_alpha': None, 'sortish_sampler': False, 'predict_with_generate': False, 'generation_max_length': None, 'generation_num_beams': None, 'generation_config': None}
|- BS:  32
  0%|                                       | 1/2305 [00:15<10:04:56, 15.75s/it]

  0%|                                        | 2/2305 [00:29<9:21:56, 14.64s/it]

  0%|                                        | 3/2305 [00:43<9:07:51, 14.28s/it]

  0%|                                        | 4/2305 [00:57<9:01:13, 14.11s/it]

  0%|                                        | 5/2305 [01:11<8:58:18, 14.04s/it]

  0%|                                        | 6/2305 [01:25<8:56:23, 14.00s/it]
{'loss': 1.1432, 'learning_rate': 2.5974025974025975e-05, 'epoch': 0.01}

  0%|                                        | 7/2305 [01:39<8:55:02, 13.97s/it]

  0%|▏                                       | 8/2305 [01:52<8:53:40, 13.94s/it]

  0%|▏                                       | 9/2305 [02:06<8:53:11, 13.93s/it]

  0%|▏                                      | 10/2305 [02:20<8:53:11, 13.94s/it]

  0%|▏                                      | 11/2305 [02:34<8:52:37, 13.93s/it]


  1%|▏                                      | 13/2305 [03:02<8:52:29, 13.94s/it]

  1%|▏                                      | 14/2305 [03:16<8:51:35, 13.92s/it]

  1%|▎                                      | 15/2305 [03:30<8:51:42, 13.93s/it]

  1%|▎                                      | 16/2305 [03:44<8:51:13, 13.92s/it]

  1%|▎                                      | 17/2305 [03:58<8:50:56, 13.92s/it]

  1%|▎                                      | 18/2305 [04:12<8:50:15, 13.91s/it]

  1%|▎                                      | 19/2305 [04:26<8:50:07, 13.91s/it]

  1%|▎                                      | 20/2305 [04:39<8:49:36, 13.91s/it]

  1%|▎                                      | 21/2305 [04:53<8:50:14, 13.93s/it]

  1%|▎                                      | 22/2305 [05:07<8:50:24, 13.94s/it]

  1%|▍                                      | 23/2305 [05:21<8:49:52, 13.93s/it]

  1%|▍                                      | 24/2305 [05:35<8:49:26, 13.93s/it]

  1%|▍                                      | 25/2305 [05:49<8:48:31, 13.91s/it]

  1%|▍                                      | 26/2305 [06:03<8:48:57, 13.93s/it]

  1%|▍                                      | 27/2305 [06:17<8:48:44, 13.93s/it]
{'loss': 1.1712, 'learning_rate': 0.00011688311688311689, 'epoch': 0.06}

  1%|▍                                      | 28/2305 [06:31<8:48:38, 13.93s/it]

  1%|▍                                      | 29/2305 [06:45<8:48:32, 13.93s/it]

  1%|▌                                      | 30/2305 [06:59<8:48:33, 13.94s/it]

  1%|▌                                      | 31/2305 [07:13<8:47:50, 13.93s/it]

  1%|▌                                      | 32/2305 [07:27<8:47:50, 13.93s/it]

  1%|▌                                      | 33/2305 [07:41<8:47:27, 13.93s/it]

  1%|▌                                      | 34/2305 [07:55<8:47:26, 13.94s/it]

  2%|▌                                      | 35/2305 [08:08<8:47:12, 13.93s/it]

  2%|▌                                      | 36/2305 [08:22<8:46:52, 13.93s/it]

  2%|▋                                      | 37/2305 [08:36<8:46:30, 13.93s/it]

  2%|▋                                      | 38/2305 [08:50<8:46:06, 13.92s/it]

  2%|▋                                      | 39/2305 [09:04<8:45:40, 13.92s/it]


  2%|▋                                      | 41/2305 [09:32<8:44:55, 13.91s/it]

  2%|▋                                      | 42/2305 [09:46<8:44:47, 13.91s/it]

  2%|▋                                      | 43/2305 [10:00<8:44:46, 13.92s/it]

  2%|▋                                      | 44/2305 [10:14<8:44:18, 13.91s/it]
{'loss': 1.0346, 'learning_rate': 0.00019047619047619048, 'epoch': 0.1}

  2%|▊                                      | 45/2305 [10:28<8:44:04, 13.91s/it]

  2%|▊                                      | 46/2305 [10:42<8:43:50, 13.91s/it]

  2%|▊                                      | 47/2305 [10:55<8:43:27, 13.91s/it]

  2%|▊                                      | 48/2305 [11:09<8:43:14, 13.91s/it]

  2%|▊                                      | 49/2305 [11:23<8:42:54, 13.91s/it]

  2%|▊                                      | 50/2305 [11:37<8:42:44, 13.91s/it]

  2%|▊                                      | 51/2305 [11:51<8:42:47, 13.92s/it]

  2%|▉                                      | 52/2305 [12:05<8:43:21, 13.94s/it]

  2%|▉                                      | 53/2305 [12:19<8:43:00, 13.93s/it]

  2%|▉                                      | 54/2305 [12:33<8:42:19, 13.92s/it]

  2%|▉                                      | 55/2305 [12:47<8:41:38, 13.91s/it]

  2%|▉                                      | 56/2305 [13:01<8:41:15, 13.91s/it]

  2%|▉                                      | 57/2305 [13:15<8:40:58, 13.90s/it]

  3%|▉                                      | 58/2305 [13:28<8:40:16, 13.89s/it]


  3%|█                                      | 60/2305 [13:56<8:40:07, 13.90s/it]

  3%|█                                      | 61/2305 [14:10<8:39:51, 13.90s/it]

  3%|█                                      | 62/2305 [14:24<8:40:01, 13.91s/it]

  3%|█                                      | 63/2305 [14:38<8:40:16, 13.92s/it]

  3%|█                                      | 64/2305 [14:52<8:40:14, 13.93s/it]
{'loss': 1.152, 'learning_rate': 0.0002770562770562771, 'epoch': 0.14}

  3%|█                                      | 65/2305 [15:06<8:40:05, 13.93s/it]

  3%|█                                      | 66/2305 [15:20<8:39:40, 13.93s/it]

  3%|█▏                                     | 67/2305 [15:34<8:39:40, 13.93s/it]

  3%|█▏                                     | 68/2305 [15:48<8:39:41, 13.94s/it]

  3%|█▏                                     | 69/2305 [16:02<8:40:09, 13.96s/it]

  3%|█▏                                     | 70/2305 [16:16<8:38:42, 13.93s/it]

  3%|█▏                                     | 71/2305 [16:30<8:38:18, 13.92s/it]

  3%|█▏                                     | 72/2305 [16:43<8:37:56, 13.92s/it]

  3%|█▏                                     | 73/2305 [16:57<8:38:17, 13.93s/it]

  3%|█▎                                     | 74/2305 [17:11<8:37:32, 13.92s/it]

  3%|█▎                                     | 75/2305 [17:25<8:37:21, 13.92s/it]

  3%|███                                                                                        | 76/2305 [17:39<8:37:15, 13.92s/it]

  3%|███                                                                                        | 77/2305 [17:53<8:36:38, 13.91s/it]Traceback (most recent call last):
  File "/home/cwtang/david_dynamo/flan_t5.py", line 199, in <module>
    trainer.train()
  File "/home/cwtang/.local/lib/python3.10/site-packages/transformers/trainer.py", line 1537, in train
    return inner_training_loop(
  File "/home/cwtang/.local/lib/python3.10/site-packages/accelerate/utils/memory.py", line 136, in decorator
    return function(batch_size, *args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/transformers/trainer.py", line 1854, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/transformers/trainer.py", line 2735, in training_step
    loss = self.compute_loss(model, inputs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/transformers/trainer.py", line 2758, in compute_loss
    outputs = model(**inputs)
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/peft/peft_model.py", line 1249, in forward
    return self.base_model(
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/peft/tuners/tuners_utils.py", line 100, in forward
    return self.model.forward(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = module._old_forward(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/transformers/models/t5/modeling_t5.py", line 1706, in forward
    encoder_outputs = self.encoder(
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = module._old_forward(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/transformers/models/t5/modeling_t5.py", line 1095, in forward
    layer_outputs = self._gradient_checkpointing_func(
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/checkpoint.py", line 249, in checkpoint
    return CheckpointFunction.apply(function, preserve, *args)
  File "/usr/local/lib/python3.10/dist-packages/torch/autograd/function.py", line 506, in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/checkpoint.py", line 107, in forward
    outputs = run_function(*args)
  File "/home/cwtang/.local/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = module._old_forward(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/transformers/models/t5/modeling_t5.py", line 694, in forward
    self_attention_outputs = self.layer[0](
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = module._old_forward(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/transformers/models/t5/modeling_t5.py", line 601, in forward
    attention_output = self.SelfAttention(
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = module._old_forward(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/transformers/models/t5/modeling_t5.py", line 520, in forward
    query_states = shape(self.q(hidden_states))  # (batch_size, n_heads, seq_length, dim_per_head)
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/peft/tuners/lora/bnb.py", line 158, in forward
    result = self.base_layer(x, *args, **kwargs)
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/accelerate/hooks.py", line 165, in new_forward
    output = module._old_forward(*args, **kwargs)
  File "/home/cwtang/.local/lib/python3.10/site-packages/bitsandbytes/nn/modules.py", line 450, in forward
    out = bnb.matmul(x, self.weight, bias=self.bias, state=self.state)
  File "/home/cwtang/.local/lib/python3.10/site-packages/bitsandbytes/autograd/_functions.py", line 562, in matmul
    return MatMul8bitLt.apply(A, B, out, bias, state)
  File "/usr/local/lib/python3.10/dist-packages/torch/autograd/function.py", line 506, in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
  File "/home/cwtang/.local/lib/python3.10/site-packages/bitsandbytes/autograd/_functions.py", line 327, in forward
    CA, CAt, SCA, SCAt, coo_tensorA = F.double_quant(A.to(torch.float16), threshold=state.threshold)
  File "/home/cwtang/.local/lib/python3.10/site-packages/bitsandbytes/functional.py", line 2132, in double_quant
    nnz = nnz_row_ptr[-1].item()
KeyboardInterrupt